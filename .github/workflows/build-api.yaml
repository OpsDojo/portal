name: Build api
on:
  pull_request:
    branches: [main]
    paths:
      - apps/portal-api/**
  workflow_dispatch:

jobs:
  run_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/portal-api
    steps:
      - name: Checkout self
        uses: actions/checkout@v4

      - name: Restore tools
        run: dotnet tool restore

      - name: Build for release
        run: dotnet build -c Release

      - name: Generate raw coverage data
        run: dotnet test -c Release -s .runsettings; dotnet reportgenerator -targetdir:'${{ github.workspace }}/coverage' -reports:**/coverage.cobertura.xml -reporttypes:"html;jsonsummary;cobertura"

      - name: Get coverage json
        id: getjson
        run: echo COVERAGE_JSON=$(tr '\r\n' ' ' <${{ github.workspace }}/coverage/Summary.json) >> $GITHUB_ENV

      - name: Check coverage values
        id: check_coverage
        run: |
          line=${{ fromJson(env.COVERAGE_JSON).summary.linecoverage }}
          branch=${{ fromJson(env.COVERAGE_JSON).summary.branchcoverage }}
          method=${{ fromJson(env.COVERAGE_JSON).summary.methodcoverage }}
          [ "$line" -ge 90 ] && ([ "$branch" == "" ] || [ "$branch" -ge 90 ]) && [ "$method" -ge 90 ] && exit 0
          exit 1

      - name: Process coverage report
        if: success() || steps.check_coverage.outcome == 'failure'
        run: |
          dotnet reportgenerator -targetdir:'${{ github.workspace }}/drop/reports' -reports:**/coverage.cobertura.xml -reporttypes:"htmlsummary"
          rm -f ${{ github.workspace }}/drop/reports/summary.htm
          mv ${{ github.workspace }}/drop/reports/summary.html ${{ github.workspace }}/drop/reports/coverage-report.html

      - name: Drop artifact - reports
        if: success() || steps.check_coverage.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: ${{ github.workspace }}/drop/reports
