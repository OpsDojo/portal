// <copyright file="SwaggerExtensions.cs" company="ne1410s">
// Copyright (c) ne1410s. All rights reserved.
// </copyright>

namespace Portal.Host.Startup;

using System.Reflection;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.OpenApi.Models;

/// <summary>
/// Extensions for adding Swagger support.
/// </summary>
public static class SwaggerExtensions
{
    /// <summary>
    /// Adds Swagger support.
    /// </summary>
    /// <param name="services">The services.</param>
    /// <param name="requireAuth">Whether to require auth on swagger endpoints.</param>
    /// <param name="xmlFilePath">XML file path. This can be generated by calling <see cref="GetXmlFilePath{T}"/>
    /// where T is a type in your api project, such as Program, Startup class or a controller.</param>
    /// <returns>The original parameter, for chainable calls.</returns>
    public static IServiceCollection AddSwaggerSupport(
        this IServiceCollection services, bool requireAuth = true, string? xmlFilePath = null)
    {
        return services
            .AddEndpointsApiExplorer()
            .AddSwaggerGen(setup =>
            {
                if (requireAuth)
                {
                    var jwtSecurityScheme = new OpenApiSecurityScheme
                    {
                        BearerFormat = "JWT",
                        Name = "JWT Authentication",
                        In = ParameterLocation.Header,
                        Type = SecuritySchemeType.Http,
                        Scheme = JwtBearerDefaults.AuthenticationScheme,
                        Description = "Add your Bearer token",
                        Reference = new()
                        {
                            Id = JwtBearerDefaults.AuthenticationScheme,
                            Type = ReferenceType.SecurityScheme,
                        },
                    };

                    setup.AddSecurityDefinition(jwtSecurityScheme.Reference.Id, jwtSecurityScheme);
                    setup.AddSecurityRequirement(new() { { jwtSecurityScheme, [] } });
                }

                setup.UseInlineDefinitionsForEnums();
                setup.OperationFilter<SwaggerAuthFilter>();

                if (xmlFilePath != null)
                {
                    setup.IncludeXmlComments(xmlFilePath);
                }
            });
    }

    /// <summary>
    /// Gets the XML file path for the specified type's assembly.
    /// </summary>
    /// <typeparam name="T">The type.</typeparam>
    /// <returns>An XML file path.</returns>
    public static string GetXmlFilePath<T>()
    {
        var assemblyName = Assembly.GetAssembly(typeof(T))!.GetName().Name;
        return Path.Combine(AppContext.BaseDirectory, $"{assemblyName}.xml");
    }

    /// <summary>
    /// Uses Swagger support.
    /// </summary>
    /// <param name="app">The app builder.</param>
    /// <returns>The original parameter, for chainable calls.</returns>
    public static IApplicationBuilder UseSwaggerSupport(this IApplicationBuilder app)
    {
        ArgumentNullException.ThrowIfNull(app);

        var env = app.ApplicationServices.GetRequiredService<IWebHostEnvironment>();
        if (env.IsDevelopment())
        {
            _ = app.UseSwagger();
            _ = app.UseSwaggerUI();
        }

        return app;
    }
}
